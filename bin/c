#!/usr/bin/env bash
set -e
export CKIE_CONFIG_REV="$(git rev-parse HEAD)"
function get_hosts {
    nix eval --raw --impure --expr 'let lib = (import <nixpkgs> {}).lib; in lib.concatStringsSep "\n" (lib.attrNames (removeAttrs (import ./deploy/morph.nix) [ "network" "defaults" "resources" "require" "_file" "_metadata" ]))'
}
function morp {
    $($0 eval build 'import ./deploy/secrets.nix { inherit uncheckedNodes; }')
    echo morph $@ $show_trace
    set +e
    morph $@ $show_trace
    morphexit="$?"
    [ $morphexit -eq 0 ] || (echo ; exit $morphexit)
    set -e
}


show_trace=""
if [ "$1" == "trace" ]; then
    show_trace="--show-trace"
    shift
fi

action=${2:-deploy}
if [ "$action" == "deploy" ]; then
    deployExtra="switch --passwd"
fi

if [ "$1" == "" ]; then
    morp $action deploy/morph.nix $deployExtra --on "$(hostname)"
elif [ "$1" == "all" ]; then
    morp $action deploy/morph.nix $deployExtra
elif [ "$1" == "installer" ]; then
    shift
    echo evaluating..
    drv="$($0 eval fast nodes.installer.config.system.build.isoImage | jq -r .drvPath)"
    echo realising "$drv"..
    store_path="$(nix-store --realise "$drv")"
    echo built "$store_path"
    if [ "$1" == "flash" ]; then
        shift
        target="$1"
        shift
        file="$(ls "$store_path"/iso/*)"
        cmd="sudo dd if=$file of=$target bs=4M status=progress $@"
        echo "$cmd"
        echo -n "I'll be running this command, please type YES if you agree to have $target OVERWRITTEN: "
        read confirm
        if [ "$confirm" == "YES" ]; then
            echo "Okay!"
            $cmd
        fi
    fi
elif get_hosts | grep "$1" >/dev/null; then
    morp $action deploy/morph.nix $deployExtra --on "$1"
elif [ "$1" == "bump" ]; then
    niv update $2
elif [ "$1" == "eval" ]; then
    shift
    file="eval-$RANDOM.nix"
    deferred() {
        rm $file
    }
    trap deferred EXIT
    mkfile() {
        echo 'let sources = import ./nix/sources.nix; eval = import "${sources.morph}/data/eval-machines.nix" { networkExpr = ./deploy/morph.nix; }; pkgs = import sources.nixpkgs {}; inherit (eval) uncheckedNodes nodes; inherit (pkgs) lib; in' > "$file"
        echo >> "$file"
        echo "$@" >> "$file"
    }
    if [ "$1" == "fast" ]; then
        shift
        mkfile $@
        # Each worker uses a lot of RAM..
        workers=$(cat /proc/meminfo | rg 'MemAvailable:\s+(\d+) kB' --replace '$1' | jq '. / (6 * 1024 * 1024) | round')
        nix-eval-jobs --workers "$workers" $file
    elif [ "$1" == "build" ]; then
        shift
        mkfile $@
        nix-build $show_trace $file
    else
        mkfile $@
        nix-instantiate $show_trace --json --strict --eval $file | jq .
    fi
    echo
elif [ "$1" == "farm" ]; then
    tmpfile="$(mktemp)"
    $0 eval fast 'with lib; mapAttrs (_: n: n.config.system.build.toplevel) nodes' | jq -r .drvPath | grep -v null > "$tmpfile"
    echo sending $(wc -l $tmpfile | cut -d' ' -f1) derivations...
    cat "$tmpfile" | xargs nix copy --derivation --substitute-on-destination --to ssh://pansear
    rsync "$tmpfile" pansear:~/aldhy/new-jobs
elif [ "$1" == "hmport" ]; then
    shift
    path="$(nix-instantiate --eval deploy/hm-only.nix | jq -r .)"
    nix copy --to "ssh://$@" --derivation "$path"
    drv="$(nix path-info --derivation "$path")"
    ssh "$@" "nix-store -r "$drv" && "$path"/bin/ckie-hm-port"
else
    echo "usage: c [trace] <all|eval [fast]|bump <source>|installer [flash <device path>]|hmport <target>>"
fi
