#!/usr/bin/env bash
set -eo pipefail
export CKIE_CONFIG_REV="$(git rev-parse HEAD)"

show_trace=""
c_trace=""
nix_build_huge=""
if [ "$1" == "trace" ]; then
    show_trace="--show-trace"
    c_trace="trace"
    shift
fi
if [ "$1" == "huge" ]; then
    nix_build_huge="--option max-jobs 1"
    shift
fi

function gen_secrets {
    $($0 $c_trace eval build direct 'import ./deploy/secrets.nix { inherit uncheckedNodes; }')
}
if [[ -z "${CKIE_DEPLOY_META}" ]]; then
    deployMeta="$(nix-instantiate $show_trace --json --strict --eval deploy/binc-info.nix)"
    export CKIE_DEPLOY_META="$deployMeta"
else
    deployMeta="$CKIE_DEPLOY_META"
fi

function morp {
    gen_secrets
    echo morph $@ $show_trace
    set +e
    morph $@ $show_trace
    morphexit="$?"
    [ $morphexit -eq 0 ] || (echo ; exit $morphexit)
    set -e
}

action=${2:-switch}
deployExtra="--passwd"
if [ "$action" == "switch" ]; then
    deployExtra="switch $deployExtra"
elif [ "$action" == "boot" ]; then
    deployExtra="boot $deployExtra"
fi

if [ "$1" == "" ]; then
    morp deploy deploy/morph.nix $deployExtra --on "$(hostname)"
elif [ "$1" == "all" ]; then
    morp deploy deploy/morph.nix $deployExtra
elif [ "$1" == "installer" ]; then
    shift
    echo evaluating + building..
    store_path="$($0 $c_trace eval build nodes.installer.config.system.build.isoImage)"
    if [ "$1" == "flash" ]; then
        shift
        target="$1"
        shift
        file="$(ls "$store_path"/iso/*)"
        cmd="sudo dd if=$file of=$target bs=4M status=progress $@"
        echo "$cmd"
        echo -n "I'll be running this command, please type YES if you agree to have $target OVERWRITTEN: "
        read confirm
        if [ "$confirm" == "YES" ]; then
            echo "Okay!"
            $cmd
        fi
    fi
elif [ "$1" == "virt" ]; then
    # TODO: take $2 for host to run in virt
    vmpath="$($0 $c_trace eval build nodes.virt.config.system.build.vm)"
    QEMU_NET_OPTS='hostfwd=tcp::5555-:22' "$vmpath/bin/"run-*-vm &
    while true; do
        ssh localhost -o ConnectTimeout=1 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p 5555 && kill %1 && break
        if ! jobs %% >/dev/null 2>&1; then
            break
        fi
        sleep 0.2
    done
elif [ "$1" == "hmport" ]; then
    shift
    path="$(nix-instantiate deploy/hm-only.nix)"
    nix copy --to "ssh://$@" --derivation "$path"
    ssh "$@" '$(nix-store -r '$path')/bin/ckie-hm-port'
elif echo "$deployMeta" | jq -r .hosts | grep -E "$1" >/dev/null; then
    morp deploy deploy/morph.nix $deployExtra --on "$1"
elif svchost=$(echo "$deployMeta" | jq ".serviceHosts["'"'$1'"'"]"); echo "$svchost" | grep -v null >/dev/null; then
    morp deploy deploy/morph.nix $deployExtra --on "{$(echo "$svchost" | jq -r 'join(",")')}"
elif [ "$1" == "bump" ] || [ "$1" == "demp" ] || [ "$1" == "cemp" ] || [ "$1" == "cdemp" ]; then
    niv update $2
    if [ "$1" == "demp" ] || [ "$1" == "cdemp" ]; then
        # try to build & deploy this demp (="buMP DEploy")
        $0 $c_trace $2
    fi
    if [ "$1" == "cemp" ] || [ "$1" == "cdemp" ]; then
        # naively commit
        git add nix/sources.json
        git commit -m "niv: bump $2"
    fi
elif [ "$1" == "eval" ]; then
    shift
    file="eval-$RANDOM.nix"
    deferred() {
        rm $file
    }
    trap deferred EXIT
    mkfile() {
        echo 'let sources = import ./nix/sources.nix; eval = import "${sources.morph}/data/eval-machines.nix" { networkExpr = ./deploy/morph.nix; }; pkgs = import sources.nixpkgs {}; inherit (eval) uncheckedNodes nodes; inherit (pkgs) lib; in' > "$file"
        echo >> "$file"
        echo "$@" >> "$file"
    }
    if [ "$1" == "fast" ]; then
        shift
        mkfile $@
        # Each worker uses a lot of RAM..
        workers=$(cat /proc/meminfo | rg 'MemAvailable:\s+(\d+) kB' --replace '$1' | jq '. / (6 * 1024 * 1024) | round')
        nix-eval-jobs $show_trace --workers "$workers" $file
    elif [ "$1" == "build" ]; then
        shift
        if [ "$1" == "direct" ]; then
            shift
            mkfile $@
            nix-build $show_trace $nix_build_huge $file
        else
            mkfile $@
            nix-build $show_trace $nix_build_huge $file --log-format internal-json -v |& nom --json
        fi
    else
        mkfile $@
        nix-instantiate $show_trace --json --strict --eval $file | jq .
    fi
    echo
elif [ "$1" == "farm" ]; then
    tmpfile="$(mktemp)"
    $0 $c_trace eval fast 'with lib; mapAttrs (_: n: n.config.system.build.toplevel) nodes' | jq -r .drvPath | grep -v null > "$tmpfile"
    echo sending $(wc -l $tmpfile | cut -d' ' -f1) derivations...
    cat "$tmpfile" | xargs nix copy --derivation --substitute-on-destination --to ssh://pansear
    rsync "$tmpfile" pansear:~/aldhy/new-jobs
elif [ "$1" == "gceup" ]; then
    # majority stolen from //nixpkgs/nixos/maintainers/scripts/gce/create-gce.sh
    BUCKET_NAME="${BUCKET_NAME:-ckie-nixos}"
    TIMESTAMP="$(date +%Y%m%d%H%M)"
    export TIMESTAMP

    if (( $# != 2 )); then
        echo "usage: c gceup <host>" >&2
        exit 1
    fi
    $0 $c_trace eval build "nodes.$2.config.system.build.googleComputeImage"

    img_path=$(echo result/*.tar.gz)
    img_name=${IMAGE_NAME:-$(basename "$img_path")}
    img_id=$(echo "$img_name" | sed 's|.raw.tar.gz$||;s|\.|-|g;s|_|-|g')
    img_family=$(echo "$img_id" | cut -d - -f1-4)

    if ! gsutil ls "gs://${BUCKET_NAME}/$img_name"; then
    gsutil cp "$img_path" "gs://${BUCKET_NAME}/$img_name"
    gsutil acl ch -u AllUsers:R "gs://${BUCKET_NAME}/$img_name"

    gcloud compute images create \
        "$img_id" \
        --source-uri "gs://${BUCKET_NAME}/$img_name" \
        --family="$img_family"

    gcloud compute images add-iam-policy-binding \
        "$img_id" \
        --member='allAuthenticatedUsers' \
        --role='roles/compute.imageUser'
fi
elif [ "$1" == "secret" ]; then
    gen_secrets
elif [ "$1" == "repl" ]; then
    nix repl --file deploy/repl.nix
else # TODO: it'd be cool if there was a command to identify how old nixos vers are on each host
    echo "usage: c [trace] <all|eval [fast]|bump <source>|installer [flash <device path>]|hmport <target>>"
fi
